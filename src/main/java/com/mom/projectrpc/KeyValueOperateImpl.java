package com.mom.projectrpc;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.TException;
import org.apache.thrift.protocol.TBinaryProtocol;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.transport.TSocket;
import org.apache.thrift.transport.TTransport;

/**
 * @author Fengyuan Zhang
 *
 *         Nov 6, 2015
 */
public class KeyValueOperateImpl implements KeyValueOperateService.Iface {

	Map<String, String> hashmap = null;
	public static final int SERVER_PORT = 8090;// server port number
	public static final int TIMEOUT = 30000;// threshold = 30s
	public int commitnum = 0;
	public String currentip;
	public String[] ipaddress = {"172.22.71.27", "172.22.71.28", "172.22.71.28", "172.22.71.28", "172.22.71.28"};

	public KeyValueOperateImpl() {
		hashmap = new HashMap<String, String>();
		
	}

	@Override
	public String executeAndReply(String str) throws TException {
		String[] orderAndReply = SupTools.executeOrder(str, hashmap, false);
		TTransport transport = null;// Thrift transport
		if (orderAndReply[0].equals("no")) {
			return orderAndReply[1];
		}
		commitnum = 0;
		for(int i=0;i<5;i++){
			// blocking I/O transport
			transport = new TSocket(ipaddress[i], SERVER_PORT, TIMEOUT);
			// protocol should be the same with the server
			TProtocol protocol = new TBinaryProtocol(transport);
			// automatically generated by Thrift
			KeyValueOperateService.Client server = new KeyValueOperateService.Client(protocol);
			transport.open();
			// use cancommit() in another server
			if (server.canCommit()) {
				commitnum++;
			}
		}
		System.out.println("cancommit num =" + commitnum);
		if(commitnum < 4){
			return "cannot commit";
		}
		commitnum = 0;
		for(int i=0;i<5;i++){
			// blocking I/O transport
			transport = new TSocket(ipaddress[i], SERVER_PORT, TIMEOUT);
			// protocol should be the same with the server
			TProtocol protocol = new TBinaryProtocol(transport);
			// automatically generated by Thrift
			KeyValueOperateService.Client server = new KeyValueOperateService.Client(protocol);
			transport.open();
			// use docommit() in another server
			if (server.doCommit(orderAndReply[0])) {
				commitnum++;
			}
		}
		System.out.println("docommit num =" + commitnum);
		if(commitnum < 4){
			return "cannot do commit";
		}
		String[] reply = SupTools.executeOrder(orderAndReply[0], hashmap, true);
		return reply[1];
	}
	@Override
	public boolean canCommit() throws TException {
		// TODO Auto-generated method stub
		System.out.println("cancommit!");
		return true;
	}

	@Override
	public boolean doCommit(String order) throws TException {
		// TODO Auto-generated method stub
		System.out.println("docommit!");
		SupTools.executeOrder(order, hashmap, true);
		return true;
	}

}

/**
 *
 * @author Xiao
 */
class SupTools {
	public static String[] executeOrder(String order, Map<String, String> hashmap, boolean canRun) {
		String[] parts = order.split("\\s+");
		String value = null;
		String result = null;
		String[] orderAndReply = new String[2];
		if (parts.length < 1) {
			orderAndReply[0] = "no";
			orderAndReply[1] = "Please input your command!";
			return orderAndReply;
		}
		switch (parts[0]) {
		case "put":// put operation
			if (parts.length < 3) {// order less than 3 parts
				orderAndReply[0] = "no";
				orderAndReply[1] = "cannot read your command! Maybe you forget the value.";
				return orderAndReply;
			}
			if (parts.length > 3) {// order more than 3 parts
				orderAndReply[0] = "no";
				orderAndReply[1] = "cannot read your command! Maybe you offer more than one value.";
				return orderAndReply;
			}
			if (canRun) {
				hashmap.put(parts[1], parts[2]);
				orderAndReply[0] = order;
				orderAndReply[1] = parts[0] + " " + parts[1] + " " + parts[2] + " success!";
			}
			break;
		case "get":
			if (parts.length > 2) {// order less than 2 parts
				orderAndReply[0] = "no";
				orderAndReply[1] = "cannot read your command! Maybe you offer more than one key.";
				return orderAndReply;
			}
			if (parts.length < 2) {// order more than 2 parts
				orderAndReply[0] = "no";
				orderAndReply[1] = "cannot read your command! Maybe you forget the key.";
				return orderAndReply;
			}
			if (canRun) {
				orderAndReply[0] = order;
				value = hashmap.get(parts[1]);
				if (value == null)
					orderAndReply[1] = parts[0] + " " + parts[1] + " fails because no matching key!";
				else
					orderAndReply[1] = "the value of " + parts[1] + " is " + value;
			}
			break;
		case "delete":
			if (parts.length > 2) {// order less than 2 parts
				orderAndReply[0] = "no";
				orderAndReply[1] = "cannot read your command! Maybe you offer more than one key.";
				return orderAndReply;
			}
			if (parts.length < 2) {// order more than 2 parts
				orderAndReply[0] = "no";
				orderAndReply[1] = "cannot read your command! Maybe you forget the key.";
				return orderAndReply;
			}
			if (canRun) {
				orderAndReply[0] = order;
				result = hashmap.remove(parts[1]);
				if (result == null)
					orderAndReply[1] = parts[0] + " " + parts[1] + " fails because no matching keys!";
				else
					orderAndReply[1] = "delete the key " + parts[1] + " success!";
			}
			break;
		default:
			orderAndReply[0] = "no";
			orderAndReply[1] = "cannot read your command!";
		}
		return orderAndReply;
	}

	/**
	 * To show the message with time
	 * 
	 * @author Fengyuan Zhang
	 */
	public static void showMeswithTime(String str) {
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String date = df.format(new Date());
		System.out.println(date + " : " + str);
	}

	/**
	 * To show the command format you will use
	 * 
	 * @author Fengyuan Zhang
	 */
	public static void showInstruction() {
		System.out.println("put key value : put operation");
		System.out.println("get key : get the value of this key");
		System.out.println("delete key : delete this key-value pairs");
	}

}